use crate::concat;
use crate::to_address;

// todo: moar test

// mnemonic: test test test test test test test test test test test junk
// derivation path: m/44'/60'/0'/0

// private keys:
// 0. 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
// 1. 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d
// 2. 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
// 3. 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6
// 4. 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a
// 5. 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
// 6. 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e
// 7. 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356
// 8. 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97
// 9. 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6

// public keys:
// 0. 0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5
// 1. 0xba5734d8f7091719471e7f7ed6b9df170dc70cc661ca05e688601ad984f068b0d67351e5f06073092499336ab0839ef8a521afd334e53807205fa2f08eec74f4
// 2. 0x9d9031e97dd78ff8c15aa86939de9b1e791066a0224e331bc962a2099a7b1f0464b8bbafe1535f2301c72c2cb3535b172da30b02686ab0393d348614f157fbdb
// 3. 0x20b871f3ced029e14472ec4ebc3c0448164942b123aa6af91a3386c1c403e0ebd3b4a5752a2b6c49e574619e6aa0549eb9ccd036b9bbc507e1f7f9712a236092
// 4. 0xbf6ee64a8d2fdc551ec8bb9ef862ef6b4bcb1805cdc520c3aa5866c0575fd3b514c5562c3caae7aec5cd6f144b57135c75b6f6cea059c3d08d1f39a9c227219d
// 5. 0x37b84de6947b243626cc8b977bb1f1632610614842468dfa8f35dcbbc55a515e47f6fe259cffc671a719eaef444a0d689b16a90051985a13661840cf5e221503
// 6. 0x9a4ab212cb92775d227af4237c20b81f4221e9361d29007dfc16c79186b577cb6ba3f1b582ad0b5572c93f47e7506d66df7f2af05fa1828de0e511aac7b97828
// 7. 0x1f2bf1fa920e77a43c7aec2587d0b3814093420cc59a9b3ad66dd5734dda7be6f8b7de790eac3a720fd8e4bcb9eae9434f843d3cec111d9e07adeddeae090f2
// 8. 0x931e7fda8da226f799f791eefc9afebcd7ae2b1b19a03c5eaa8d72122d9fe74d887a3962ff861190b531ab31ee82f0d7f255dfe3ab73ca627bd70ab3d1cbb417
// 9. 0x3255458e24278e31d5940f304b16300fdff3f6efd3e2a030b5818310ac67af45e28d057e6a332d07e0c5ab09d6947fd4eed1a646edbf224e2d2fec6f49f90abc

// addresses:
// 0. 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
// 1. 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
// 2. 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC
// 3. 0x90F79bf6EB2c4f870365E785982E1f101E93b906
// 4. 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65
// 5. 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc
// 6. 0x976EA74026E726554dB657fA54763abd0C3a0aa9
// 7. 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955
// 8. 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f
// 9. 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720

#[test]
fn test_concat() {
    let lhs = [
        0x83, 0x18, 0x53, 0x5b, 0x54, 0x10, 0x5d, 0x4a, 0x7a, 0xae, 0x60, 0xc0, 0x8f, 0xc4, 0x5f,
        0x96, 0x87, 0x18, 0x1b, 0x4f, 0xdf, 0xc6, 0x25, 0xbd, 0x1a, 0x75, 0x3f, 0xa7, 0x39, 0x7f,
        0xed, 0x75,
    ];

    let rhs = [
        0x35, 0x47, 0xf1, 0x1c, 0xa8, 0x69, 0x66, 0x46, 0xf2, 0xf3, 0xac, 0xb0, 0x8e, 0x31, 0x01,
        0x6a, 0xfa, 0xc2, 0x3e, 0x63, 0x0c, 0x5d, 0x11, 0xf5, 0x9f, 0x61, 0xfe, 0xf5, 0x7b, 0x0d,
        0x2a, 0xa5,
    ];

    let target_array = [
        0x83, 0x18, 0x53, 0x5b, 0x54, 0x10, 0x5d, 0x4a, 0x7a, 0xae, 0x60, 0xc0, 0x8f, 0xc4, 0x5f,
        0x96, 0x87, 0x18, 0x1b, 0x4f, 0xdf, 0xc6, 0x25, 0xbd, 0x1a, 0x75, 0x3f, 0xa7, 0x39, 0x7f,
        0xed, 0x75, 0x35, 0x47, 0xf1, 0x1c, 0xa8, 0x69, 0x66, 0x46, 0xf2, 0xf3, 0xac, 0xb0, 0x8e,
        0x31, 0x01, 0x6a, 0xfa, 0xc2, 0x3e, 0x63, 0x0c, 0x5d, 0x11, 0xf5, 0x9f, 0x61, 0xfe, 0xf5,
        0x7b, 0x0d, 0x2a, 0xa5,
    ];

    assert_eq(concat(lhs, rhs), target_array);
}

#[test]
fn test_to_address_0() {
    let pub_x = [
        0x83, 0x18, 0x53, 0x5b, 0x54, 0x10, 0x5d, 0x4a, 0x7a, 0xae, 0x60, 0xc0, 0x8f, 0xc4, 0x5f,
        0x96, 0x87, 0x18, 0x1b, 0x4f, 0xdf, 0xc6, 0x25, 0xbd, 0x1a, 0x75, 0x3f, 0xa7, 0x39, 0x7f,
        0xed, 0x75,
    ];

    let pub_y = [
        0x35, 0x47, 0xf1, 0x1c, 0xa8, 0x69, 0x66, 0x46, 0xf2, 0xf3, 0xac, 0xb0, 0x8e, 0x31, 0x01,
        0x6a, 0xfa, 0xc2, 0x3e, 0x63, 0x0c, 0x5d, 0x11, 0xf5, 0x9f, 0x61, 0xfe, 0xf5, 0x7b, 0x0d,
        0x2a, 0xa5,
    ];

    let address = to_address(pub_x, pub_y);

    // 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
    let target_address = [
        0xf3, 0x9f, 0xd6, 0xe5, 0x1a, 0xad, 0x88, 0xf6, 0xf4, 0xce, 0x6a, 0xb8, 0x82, 0x72, 0x79,
        0xcf, 0xff, 0xb9, 0x22, 0x66,
    ];

    assert_eq(address, target_address);
}

#[test]
fn test_to_address_1() {
    let pub_x = [
        0xba, 0x57, 0x34, 0xd8, 0xf7, 0x09, 0x17, 0x19, 0x47, 0x1e, 0x7f, 0x7e, 0xd6, 0xb9, 0xdf,
        0x17, 0x0d, 0xc7, 0x0c, 0xc6, 0x61, 0xca, 0x05, 0xe6, 0x88, 0x60, 0x1a, 0xd9, 0x84, 0xf0,
        0x68, 0xb0,
    ];

    let pub_y = [
        0xd6, 0x73, 0x51, 0xe5, 0xf0, 0x60, 0x73, 0x09, 0x24, 0x99, 0x33, 0x6a, 0xb0, 0x83, 0x9e,
        0xf8, 0xa5, 0x21, 0xaf, 0xd3, 0x34, 0xe5, 0x38, 0x07, 0x20, 0x5f, 0xa2, 0xf0, 0x8e, 0xec,
        0x74, 0xf4,
    ];

    let address = to_address(pub_x, pub_y);

    // 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
    let target_address = [
        0x70, 0x99, 0x79, 0x70, 0xC5, 0x18, 0x12, 0xdc, 0x3A, 0x01, 0x0C, 0x7d, 0x01, 0xb5, 0x0e,
        0x0d, 0x17, 0xdc, 0x79, 0xC8,
    ];

    assert_eq(address, target_address);
}
